"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const download_1 = require("../download");
const get_platform_1 = require("@prisma/get-platform");
const cleanupCache_1 = require("../cleanupCache");
const del_1 = __importDefault(require("del"));
const CURRENT_BINARIES_HASH = require('../../../sdk/package.json').prisma
    .version;
const FIXED_BINARIES_HASH = 'de2bc1cbdb5561ad73d2f08463fa2eec48993f56';
jest.setTimeout(30000);
describe('download', () => {
    beforeAll(async () => {
        // completely clean up the cache and keep nothing
        await cleanupCache_1.cleanupCache(0);
        await del_1.default(__dirname + '/**/*engine*');
        await del_1.default(__dirname + '/**/prisma-fmt*');
    });
    test('basic download', async () => {
        const platform = await get_platform_1.getPlatform();
        const queryEnginePath = path_1.default.join(__dirname, download_1.getBinaryName('query-engine', platform));
        const introspectionEnginePath = path_1.default.join(__dirname, download_1.getBinaryName('introspection-engine', platform));
        const migrationEnginePath = path_1.default.join(__dirname, download_1.getBinaryName('migration-engine', platform));
        const prismafmtPath = path_1.default.join(__dirname, download_1.getBinaryName('prisma-fmt', platform));
        await download_1.download({
            binaries: {
                'query-engine': __dirname,
                'introspection-engine': __dirname,
                'migration-engine': __dirname,
                'prisma-fmt': __dirname,
            },
            version: FIXED_BINARIES_HASH,
        });
        expect(await download_1.getVersion(queryEnginePath)).toMatchInlineSnapshot(`"query-engine de2bc1cbdb5561ad73d2f08463fa2eec48993f56"`);
        expect(await download_1.getVersion(introspectionEnginePath)).toMatchInlineSnapshot(`"introspection-core de2bc1cbdb5561ad73d2f08463fa2eec48993f56"`);
        expect(await download_1.getVersion(migrationEnginePath)).toMatchInlineSnapshot(`"migration-engine-cli de2bc1cbdb5561ad73d2f08463fa2eec48993f56"`);
        expect(await download_1.getVersion(prismafmtPath)).toMatchInlineSnapshot(`"prisma-fmt de2bc1cbdb5561ad73d2f08463fa2eec48993f56"`);
    });
    test('basic download all current binaries', async () => {
        await download_1.download({
            binaries: {
                'query-engine': __dirname,
                'introspection-engine': __dirname,
                'migration-engine': __dirname,
                'prisma-fmt': __dirname,
            },
            binaryTargets: [
                'darwin',
                'debian-openssl-1.0.x',
                'debian-openssl-1.1.x',
                'rhel-openssl-1.0.x',
                'rhel-openssl-1.1.x',
                'windows',
                'linux-musl',
            ],
            version: CURRENT_BINARIES_HASH,
        });
    });
    test('auto heal corrupt binary', async () => {
        const platform = await get_platform_1.getPlatform();
        const baseDir = path_1.default.join(__dirname, 'corruption');
        const targetPath = path_1.default.join(baseDir, download_1.getBinaryName('query-engine', platform));
        if (fs_1.default.existsSync(targetPath)) {
            try {
                fs_1.default.unlinkSync(targetPath);
            }
            catch (e) {
                console.error(e);
            }
        }
        await download_1.download({
            binaries: {
                'query-engine': baseDir,
            },
            version: FIXED_BINARIES_HASH,
        });
        fs_1.default.writeFileSync(targetPath, 'incorrect-binary');
        // please heal it
        await download_1.download({
            binaries: {
                'query-engine': baseDir,
            },
            version: FIXED_BINARIES_HASH,
        });
        expect(fs_1.default.existsSync(targetPath)).toBe(true);
        expect(await download_1.checkVersionCommand(targetPath)).toBe(true);
    });
    test('handle non-existent binary target', async () => {
        await expect(download_1.download({
            binaries: {
                'query-engine': __dirname,
            },
            version: FIXED_BINARIES_HASH,
            binaryTargets: ['darwin', 'marvin'],
        })).rejects.toThrowErrorMatchingInlineSnapshot(`"Unknown binaryTargets marvin"`);
    });
    test('download all binaries & cache them', async () => {
        const baseDir = path_1.default.join(__dirname, 'all');
        await download_1.download({
            binaries: {
                'query-engine': baseDir,
                'introspection-engine': baseDir,
                'migration-engine': baseDir,
                'prisma-fmt': baseDir,
            },
            binaryTargets: [
                'darwin',
                'debian-openssl-1.0.x',
                'debian-openssl-1.1.x',
                'rhel-openssl-1.0.x',
                'rhel-openssl-1.1.x',
                'windows',
                'linux-musl',
            ],
            version: FIXED_BINARIES_HASH,
        });
        const files = getFiles(baseDir);
        expect(files).toMatchInlineSnapshot(`
      Array [
        Object {
          "name": ".gitkeep",
          "size": 0,
        },
        Object {
          "name": "introspection-engine-darwin",
          "size": 11368280,
        },
        Object {
          "name": "introspection-engine-debian-openssl-1.0.x",
          "size": 14375432,
        },
        Object {
          "name": "introspection-engine-debian-openssl-1.1.x",
          "size": 14350592,
        },
        Object {
          "name": "introspection-engine-linux-musl",
          "size": 17247608,
        },
        Object {
          "name": "introspection-engine-rhel-openssl-1.0.x",
          "size": 14439690,
        },
        Object {
          "name": "introspection-engine-rhel-openssl-1.1.x",
          "size": 14415929,
        },
        Object {
          "name": "introspection-engine-windows.exe",
          "size": 23728613,
        },
        Object {
          "name": "migration-engine-darwin",
          "size": 14446400,
        },
        Object {
          "name": "migration-engine-debian-openssl-1.0.x",
          "size": 17690344,
        },
        Object {
          "name": "migration-engine-debian-openssl-1.1.x",
          "size": 17640080,
        },
        Object {
          "name": "migration-engine-linux-musl",
          "size": 20378472,
        },
        Object {
          "name": "migration-engine-rhel-openssl-1.0.x",
          "size": 17770911,
        },
        Object {
          "name": "migration-engine-rhel-openssl-1.1.x",
          "size": 17717704,
        },
        Object {
          "name": "migration-engine-windows.exe",
          "size": 28185148,
        },
        Object {
          "name": "prisma-fmt-darwin",
          "size": 3243384,
        },
        Object {
          "name": "prisma-fmt-debian-openssl-1.0.x",
          "size": 5871464,
        },
        Object {
          "name": "prisma-fmt-debian-openssl-1.1.x",
          "size": 5871176,
        },
        Object {
          "name": "prisma-fmt-linux-musl",
          "size": 5870392,
        },
        Object {
          "name": "prisma-fmt-rhel-openssl-1.0.x",
          "size": 5935619,
        },
        Object {
          "name": "prisma-fmt-rhel-openssl-1.1.x",
          "size": 5937101,
        },
        Object {
          "name": "prisma-fmt-windows.exe",
          "size": 19747898,
        },
        Object {
          "name": "query-engine-darwin",
          "size": 16798944,
        },
        Object {
          "name": "query-engine-debian-openssl-1.0.x",
          "size": 20246256,
        },
        Object {
          "name": "query-engine-debian-openssl-1.1.x",
          "size": 20219680,
        },
        Object {
          "name": "query-engine-linux-musl",
          "size": 22860424,
        },
        Object {
          "name": "query-engine-rhel-openssl-1.0.x",
          "size": 20289622,
        },
        Object {
          "name": "query-engine-rhel-openssl-1.1.x",
          "size": 20268248,
        },
        Object {
          "name": "query-engine-windows.exe",
          "size": 30550365,
        },
      ]
    `);
        await del_1.default(baseDir + '/*engine*');
        await del_1.default(baseDir + '/prisma-fmt*');
        const before = Date.now();
        await download_1.download({
            binaries: {
                'query-engine': baseDir,
                'introspection-engine': baseDir,
                'migration-engine': baseDir,
                'prisma-fmt': baseDir,
            },
            binaryTargets: [
                'darwin',
                'debian-openssl-1.0.x',
                'debian-openssl-1.1.x',
                'rhel-openssl-1.0.x',
                'rhel-openssl-1.1.x',
                'windows',
                'linux-musl',
            ],
            version: FIXED_BINARIES_HASH,
        });
        const after = Date.now();
        // cache should take less than 2s
        // value on Mac: 1440
        expect(after - before).toBeLessThan(4000);
        const before2 = Date.now();
        await download_1.download({
            binaries: {
                'query-engine': baseDir,
                'introspection-engine': baseDir,
                'migration-engine': baseDir,
                'prisma-fmt': baseDir,
            },
            binaryTargets: [
                'darwin',
                'debian-openssl-1.0.x',
                'debian-openssl-1.1.x',
                'rhel-openssl-1.0.x',
                'rhel-openssl-1.1.x',
                'windows',
                'linux-musl',
            ],
            version: FIXED_BINARIES_HASH,
        });
        const after2 = Date.now();
        // if binaries are already there, it should take less than 100ms to check all of them
        // value on Mac: 33ms
        expect(after2 - before2).toBeLessThan(3000);
    });
});
function getFiles(dir) {
    const files = fs_1.default.readdirSync(dir, 'utf8');
    return files.map((name) => {
        const size = fs_1.default.statSync(path_1.default.join(dir, name)).size;
        return { name, size };
    });
}
//# sourceMappingURL=download.test.js.map