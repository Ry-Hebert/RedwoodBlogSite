import { l as lib } from './fetch-deps.js';

/**
 * Parses a given string into a JSON.
 * Does not throw an exception on an invalid JSON string.
 */
function jsonParse(str) {
    try {
        return JSON.parse(str);
    }
    catch (error) {
        return undefined;
    }
}

/**
 * Returns a parsed JSON from a given valid body string,
 * otherwise returns a given body string as-is.
 */
function getJsonBody(body) {
    return jsonParse(body) || body;
}

/**
 * Formats a mocked request for introspection in browser's console.
 */
function prepareRequest(req) {
    return Object.assign(Object.assign({}, req), { headers: req.headers.getAllHeaders() });
}

/**
 * Formats a mocked response for introspection in browser's console.
 */
function prepareResponse(res) {
    var _a;
    const resHeaders = lib.listToHeaders(res.headers);
    return Object.assign(Object.assign({}, res), { 
        // Parse a response JSON body for preview in the logs
        body: ((_a = resHeaders.get('content-type')) === null || _a === void 0 ? void 0 : _a.includes('json')) ? getJsonBody(res.body)
            : res.body });
}

function getTimestamp() {
    const now = new Date();
    return [now.getHours(), now.getMinutes(), now.getSeconds()]
        .map(String)
        .map((chunk) => chunk.slice(0, 2))
        .map((chunk) => chunk.padStart(2, '0'))
        .join(':');
}

/**
 * Returns a HEX color for a given response status code number.
 */
function getStatusCodeColor(status) {
    if (status < 300) {
        return '#69AB32';
    }
    if (status < 400) {
        return '#F0BB4B';
    }
    return '#E95F5D';
}

export { prepareResponse as a, getTimestamp as b, getStatusCodeColor as c, getJsonBody as g, jsonParse as j, prepareRequest as p };
