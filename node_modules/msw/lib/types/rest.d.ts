import { RequestHandler, ResponseResolver, MockedRequest } from './handlers/requestHandler';
import { Mask } from './setupWorker/glossary';
import { set } from './context/set';
export declare enum RESTMethods {
    GET = "GET",
    POST = "POST",
    PUT = "PUT",
    PATCH = "PATCH",
    OPTIONS = "OPTIONS",
    DELETE = "DELETE"
}
export declare const restContext: {
    set: typeof set;
    status: (statusCode: number, statusText?: string | undefined) => import("./response").ResponseTransformer;
    cookie: (name: string, value: string, options?: import("cookie").CookieSerializeOptions | undefined) => import("./response").ResponseTransformer;
    body: <T>(value: T) => import("./response").ResponseTransformer;
    text: (body: string) => import("./response").ResponseTransformer;
    json: (body: Record<string, any>) => import("./response").ResponseTransformer;
    xml: (body: string) => import("./response").ResponseTransformer;
    delay: (durationMs?: number | undefined) => import("./response").ResponseTransformer;
    fetch: <ResponseType_1 = any>(input: string | MockedRequest, requestInit?: RequestInit) => Promise<ResponseType_1>;
};
export declare const rest: {
    get: (mask: Mask, resolver: ResponseResolver<MockedRequest, typeof restContext>) => RequestHandler<MockedRequest, typeof restContext>;
    post: (mask: Mask, resolver: ResponseResolver<MockedRequest, typeof restContext>) => RequestHandler<MockedRequest, typeof restContext>;
    put: (mask: Mask, resolver: ResponseResolver<MockedRequest, typeof restContext>) => RequestHandler<MockedRequest, typeof restContext>;
    delete: (mask: Mask, resolver: ResponseResolver<MockedRequest, typeof restContext>) => RequestHandler<MockedRequest, typeof restContext>;
    patch: (mask: Mask, resolver: ResponseResolver<MockedRequest, typeof restContext>) => RequestHandler<MockedRequest, typeof restContext>;
    options: (mask: Mask, resolver: ResponseResolver<MockedRequest, typeof restContext>) => RequestHandler<MockedRequest, typeof restContext>;
};
