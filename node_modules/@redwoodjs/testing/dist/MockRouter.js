"use strict";

var _Object$keys = require("@babel/runtime-corejs3/core-js/object/keys");

var _forEachInstanceProperty = require("@babel/runtime-corejs3/core-js/instance/for-each");

var _context5;

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

var _exportNames = {
  routes: true,
  Router: true
};
exports.Router = exports.routes = void 0;

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));

var _flat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/flat"));

var _react = _interopRequireDefault(require("react"));

var _index = require("@redwoodjs/router/dist/index");

_forEachInstanceProperty(_context5 = _Object$keys(_index)).call(_context5, function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;

  _Object$defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index[key];
    }
  });
});

// Bypass the `main` field in `package.json` because we alias `@redwoodjs/router`
// for jest and Storybook. Not doing so would cause an infinite loop.
// See: ./packages/core/config/jest.config.web.js
// @ts-expect-error
// @ts-expect-error
const routes = {};
exports.routes = routes;

const getPrivateRoutes = children => {
  var _context, _context2, _context3;

  return (0, _flat.default)(_context = (0, _map.default)(_context2 = (0, _filter.default)(_context3 = _react.default.Children.toArray(children)).call(_context3, child => child.type === _index.Private)).call(_context2, child => child.props.children)).call(_context, Infinity);
};
/**
 * We overwrite the default `Router` export.
 * It populates the `routes.<pagename>()` utility object.
 */


const Router = ({
  children
}) => {
  var _context4;

  // get all children from <Private> blocks.
  const privateRoutes = getPrivateRoutes(children);
  const normalRoutes = (0, _filter.default)(_context4 = _react.default.Children.toArray(children)).call(_context4, child => child.type === _index.Route);

  for (const child of [...privateRoutes, ...normalRoutes]) {
    const {
      name
    } = child.props;

    routes[name] = () => name;
  }

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null);
};

exports.Router = Router;