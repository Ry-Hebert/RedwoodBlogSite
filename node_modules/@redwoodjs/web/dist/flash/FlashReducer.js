"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _find = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/find"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/concat"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/toConsumableArray"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/objectSpread2"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));

// helpers
var removeMessage = function removeMessage(messages, id) {
  return (0, _filter.default)(messages).call(messages, function (msg) {
    return msg.id !== id;
  });
}; // the reducer


var _default = function _default(state, action) {
  var _context;

  switch (action.type) {
    case 'ADD_MESSAGE':
      // add a message
      return (0, _objectSpread2.default)((0, _objectSpread2.default)({}, state), {}, {
        messages: (0, _concat.default)(_context = []).call(_context, (0, _toConsumableArray2.default)(state.messages), [{
          id: state.messages.length,
          text: action.payload.text,
          classes: action.payload.classes || '',
          persist: action.payload.persist || false,
          viewed: action.payload.viewed || false
        }])
      });

    case 'DISMISS_MESSAGE':
      {
        // return messages that do not match id (via payload)
        var newMessages = removeMessage(state.messages, action.payload);
        return (0, _objectSpread2.default)((0, _objectSpread2.default)({}, state), {}, {
          messages: newMessages
        });
      }

    case 'CYCLE_MESSAGE':
      {
        var _context2;

        // find the message
        // if viewed and not persist, remove it
        // else mark as viewed
        var _newMessages = [];
        var message = (0, _find.default)(_context2 = state.messages).call(_context2, function (msg) {
          return msg.id === action.payload;
        });

        if (message.viewed && !message.persist) {
          _newMessages = removeMessage(state.messages, action.payload);
        } else {
          message.viewed = true;
          _newMessages = (0, _toConsumableArray2.default)(state.messages);
        }

        return (0, _objectSpread2.default)((0, _objectSpread2.default)({}, state), {}, {
          messages: _newMessages
        });
      }

    default:
      return state;
  }
};

exports.default = _default;