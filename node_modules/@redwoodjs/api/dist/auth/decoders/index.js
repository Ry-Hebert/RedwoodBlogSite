"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.decodeToken = void 0;

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/keys"));

var _netlify = require("./netlify");

var _auth = require("./auth0");

const noop = token => token;

const typesToDecoders = {
  auth0: _auth.auth0,
  netlify: _netlify.netlify,
  goTrue: _netlify.netlify,
  magicLink: noop,
  firebase: noop,
  custom: noop
};

const decodeToken = async (type, token, req) => {
  if (!typesToDecoders[type]) {
    // Make this a warning, instead of a hard error
    // Allow users to have multiple custom types if they choose to
    if (process.env.NODE_ENV === 'development') {
      console.warn(`The auth type "${type}" is not officially supported, we currently support: ${(0, _keys.default)(typesToDecoders).join(', ')}`);
      console.warn('Please ensure you have handlers for your custom auth in getCurrentUser in src/lib/auth.{js,ts}');
    }
  }

  const decoder = typesToDecoders[type] || noop;
  return decoder(token, req);
};

exports.decodeToken = decodeToken;