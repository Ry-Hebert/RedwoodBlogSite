"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.handler = exports.builder = exports.description = exports.command = void 0;

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/concat"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));

var _execa = _interopRequireDefault(require("execa"));

var _terminalLink = _interopRequireDefault(require("terminal-link"));

var _structure = require("@redwoodjs/structure");

var _internal = require("@redwoodjs/internal");

var _lib = require("../lib");

var _colors = _interopRequireDefault(require("../lib/colors"));

// https://github.com/facebook/create-react-app/blob/cbad256a4aacfc3084be7ccf91aad87899c63564/packages/react-scripts/scripts/test.js#L39
function isInGitRepository() {
  try {
    _execa.default.commandSync('git rev-parse --is-inside-work-tree');

    return true;
  } catch (e) {
    return false;
  }
}

function isInMercurialRepository() {
  try {
    _execa.default.commandSync('hg --cwd . root');

    return true;
  } catch (e) {
    return false;
  }
}

const command = 'test [side..]';
exports.command = command;
const description = 'Run Jest tests. Defaults to watch mode';
exports.description = description;

const builder = yargs => {
  yargs.choices('side', (0, _structure.getProject)().sides).option('watch', {
    describe: 'Run tests related to changed files based on hg/git. Specify the name or path to a file to focus on a specific set of tests',
    type: 'boolean',
    default: false
  }).option('watchAll', {
    describe: 'Run all tests',
    type: 'boolean',
    default: false
  }).option('collectCoverage', {
    describe: 'Show test coverage summary and output info to coverage directory',
    type: 'boolean',
    default: false
  }).option('clearCache', {
    describe: 'Delete the Jest cache directory and exit without running tests',
    type: 'boolean',
    default: false
  }).epilogue(`Also see the ${(0, _terminalLink.default)('Redwood CLI Reference', 'https://redwoodjs.com/reference/command-line-interface#test')}`);
};

exports.builder = builder;

const handler = async ({
  side,
  watch = false,
  watchAll = false,
  collectCoverage = false
}) => {
  var _context, _context2, _context3;

  const {
    cache: CACHE_DIR
  } = (0, _lib.getPaths)();
  const sides = (0, _filter.default)(_context = (0, _concat.default)(_context2 = []).call(_context2, side)).call(_context, Boolean);
  const args = (0, _filter.default)(_context3 = ['--passWithNoTests', watch && '--watch', collectCoverage && '--collectCoverage', watchAll && '--watchAll']).call(_context3, Boolean); // If you don't pass any arguments we enter "watch mode" as the default.

  if (!process.env.CI && !watchAll && !collectCoverage) {
    // https://github.com/facebook/create-react-app/issues/5210
    const hasSourceControl = isInGitRepository() || isInMercurialRepository();
    args.push(hasSourceControl ? '--watch' : '--watchAll');
  }

  args.push('--config', require.resolve('@redwoodjs/core/config/jest.config.js'));

  if (sides.length > 0) {
    args.push('--projects', ...sides);
  }

  try {
    // Create a test database
    if ((0, _includes.default)(sides).call(sides, 'api')) {
      const cacheDirDb = `file:${(0, _internal.ensurePosixPath)(CACHE_DIR)}/test.db`;
      const DATABASE_URL = process.env.TEST_DATABASE_URL || cacheDirDb;
      await _execa.default.command(`yarn rw db up`, {
        stdio: 'inherit',
        shell: true,
        env: {
          DATABASE_URL
        }
      });
    } // **NOTE** There is no official way to run Jest programatically,
    // so we're running it via execa, since `jest.run()` is a bit unstable.
    // https://github.com/facebook/jest/issues/5048


    (0, _execa.default)('yarn jest', args, {
      cwd: (0, _lib.getPaths)().base,
      shell: true,
      stdio: 'inherit'
    });
  } catch (e) {
    console.log(_colors.default.error(e.message));
  }
};

exports.handler = handler;