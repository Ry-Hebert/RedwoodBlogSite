"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.handler = exports.builder = exports.description = exports.command = exports.files = void 0;

var _reduce = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/reduce"));

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));

var _pascalcase = _interopRequireDefault(require("pascalcase"));

var _structure = require("@redwoodjs/structure");

var _helpers = require("../helpers");

const COMPONENT_SUFFIX = 'Cell';
const REDWOOD_WEB_PATH_NAME = 'components';

const getCellOperationNames = () => {
  var _context, _context2;

  return (0, _filter.default)(_context = (0, _map.default)(_context2 = (0, _structure.getProject)().cells).call(_context2, x => {
    return x.queryOperationName;
  })).call(_context, Boolean);
};

const uniqueOperationName = (name, index = 1) => {
  var _context3;

  let operationName = index <= 1 ? `${(0, _pascalcase.default)(name)}Query` : `${(0, _pascalcase.default)(name)}Query_${index}`;

  if (!(0, _includes.default)(_context3 = getCellOperationNames()).call(_context3, operationName)) {
    return operationName;
  }

  return uniqueOperationName(name, index + 1);
};

const files = ({
  name
}) => {
  var _context4;

  // Create a unique operation name.
  const operationName = uniqueOperationName(name);
  const cellFile = (0, _helpers.templateForComponentFile)({
    name,
    suffix: COMPONENT_SUFFIX,
    webPathSection: REDWOOD_WEB_PATH_NAME,
    generator: 'cell',
    templatePath: 'cell.js.template',
    templateVars: {
      operationName
    }
  });
  const testFile = (0, _helpers.templateForComponentFile)({
    name,
    suffix: COMPONENT_SUFFIX,
    extension: '.test.js',
    webPathSection: REDWOOD_WEB_PATH_NAME,
    generator: 'cell',
    templatePath: 'test.js.template'
  });
  const storiesFile = (0, _helpers.templateForComponentFile)({
    name,
    suffix: COMPONENT_SUFFIX,
    extension: '.stories.js',
    webPathSection: REDWOOD_WEB_PATH_NAME,
    generator: 'cell',
    templatePath: 'stories.js.template'
  });
  const mockFile = (0, _helpers.templateForComponentFile)({
    name,
    suffix: COMPONENT_SUFFIX,
    extension: '.mock.js',
    webPathSection: REDWOOD_WEB_PATH_NAME,
    generator: 'cell',
    templatePath: 'mock.js.template'
  }); // Returns
  // {
  //    "path/to/fileA": "<<<template>>>",
  //    "path/to/fileB": "<<<template>>>",
  // }

  return (0, _reduce.default)(_context4 = [cellFile, testFile, storiesFile, mockFile]).call(_context4, (acc, [outputPath, content]) => {
    return {
      [outputPath]: content,
      ...acc
    };
  }, {});
};

exports.files = files;
const {
  command,
  description,
  builder,
  handler
} = (0, _helpers.createYargsForComponentGeneration)({
  componentName: 'cell',
  filesFn: files
});
exports.handler = handler;
exports.builder = builder;
exports.description = description;
exports.command = command;