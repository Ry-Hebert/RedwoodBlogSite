"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.handler = exports.builder = exports.description = exports.command = void 0;

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/for-each"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/promise"));

var _interopRequireWildcard2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/interopRequireWildcard"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _listr = _interopRequireDefault(require("listr"));

var _terminalLink = _interopRequireDefault(require("terminal-link"));

var _lib = require("../../../lib");

var _colors = _interopRequireDefault(require("../../../lib/colors"));

var _context, _context2;

const REDWOOD_TOML_PATH = _path.default.join((0, _lib.getPaths)().base, 'redwood.toml');

const SUPPORTED_PROVIDERS = (0, _filter.default)(_context = (0, _map.default)(_context2 = _fs.default.readdirSync(_path.default.resolve(__dirname, 'providers'))).call(_context2, file => _path.default.basename(file, '.js'))).call(_context, file => file !== 'README.md');

const updateProxyPath = newProxyPath => {
  const redwoodToml = _fs.default.readFileSync(REDWOOD_TOML_PATH).toString();

  let newRedwoodToml = redwoodToml;

  if (redwoodToml.match(/apiProxyPath/)) {
    newRedwoodToml = newRedwoodToml.replace(/apiProxyPath.*/g, `apiProxyPath = "${newProxyPath}"`);
  } else if (redwoodToml.match(/\[web\]/)) {
    newRedwoodToml = newRedwoodToml.replace(/\[web\]/, `[web]\n  apiProxyPath = "${newProxyPath}"`);
  } else {
    newRedwoodToml += `[web]\n  apiProxyPath = "${newProxyPath}"`;
  }

  _fs.default.writeFileSync(REDWOOD_TOML_PATH, newRedwoodToml);
};

const command = 'deploy <provider>';
exports.command = command;
const description = 'Generate a deployment configuration';
exports.description = description;

const builder = yargs => {
  yargs.positional('provider', {
    choices: SUPPORTED_PROVIDERS,
    description: 'Deploy provider to configure',
    type: 'string'
  }).option('force', {
    alias: 'f',
    default: false,
    description: 'Overwrite existing configuration',
    type: 'boolean'
  }).epilogue(`Also see the ${(0, _terminalLink.default)('Redwood CLI Reference', 'https://redwoodjs.com/reference/command-line-interface#generate-deploy')}`);
};

exports.builder = builder;

const handler = async ({
  provider,
  force
}) => {
  var _context3;

  const providerData = await _promise.default.resolve(`./providers/${provider}`).then(s => (0, _interopRequireWildcard2.default)(require(s)));
  const tasks = new _listr.default((0, _filter.default)(_context3 = [providerData.files && providerData.files.length > 0 && {
    title: 'Adding config...',
    task: async () => {
      var _context4;

      let files = {};
      (0, _forEach.default)(_context4 = providerData.files).call(_context4, fileData => {
        files[fileData.path] = fileData.content;
      });
      return (0, _lib.writeFilesTask)(files, {
        overwriteExisting: force
      });
    }
  }, {
    title: 'Updating apiProxyPath...',
    task: async () => {
      updateProxyPath(providerData.apiProxyPath);
    }
  }, {
    title: 'One more thing...',
    task: (_ctx, task) => {
      task.title = `One more thing...\n\n   ${providerData.notes.join('\n   ')}\n`;
    }
  }]).call(_context3, Boolean), {
    collapse: false
  });

  try {
    await tasks.run();
  } catch (e) {
    console.log(_colors.default.error(e.message));
  }
};

exports.handler = handler;