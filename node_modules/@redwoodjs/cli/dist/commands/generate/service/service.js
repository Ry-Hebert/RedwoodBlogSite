"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.handler = exports.description = exports.command = exports.builder = exports.defaults = exports.files = void 0;

var _entries = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/entries"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/for-each"));

var _reduce = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/reduce"));

var _camelcase = _interopRequireDefault(require("camelcase"));

var _pluralize = _interopRequireDefault(require("pluralize"));

var _terminalLink = _interopRequireDefault(require("terminal-link"));

var _lib = require("../../../lib");

var _generate = require("../../generate");

var _helpers = require("../helpers");

const files = async ({
  name,
  relations,
  javascript,
  typescript,
  ...rest
}) => {
  var _context;

  const componentName = (0, _camelcase.default)((0, _pluralize.default)(name));
  const extension = 'ts';
  const serviceFile = (0, _helpers.templateForComponentFile)({
    name,
    componentName: componentName,
    extension: `.${extension}`,
    apiPathSection: 'services',
    generator: 'service',
    templatePath: `service.${extension}.template`,
    templateVars: {
      relations: relations || [],
      ...rest
    }
  });
  const testFile = (0, _helpers.templateForComponentFile)({
    name,
    componentName: componentName,
    extension: `.test.${extension}`,
    apiPathSection: 'services',
    generator: 'service',
    templatePath: `test.${extension}.template`,
    templateVars: {
      relations: relations || [],
      ...rest
    }
  }); // Returns
  // {
  //    "path/to/fileA": "<<<template>>>",
  //    "path/to/fileB": "<<<template>>>",
  // }

  return (0, _reduce.default)(_context = [serviceFile, testFile]).call(_context, (acc, [outputPath, content]) => {
    if (javascript && !typescript) {
      content = (0, _lib.transformTSToJS)(outputPath, content);
      outputPath = outputPath.replace('.ts', '.js');
    }

    return {
      [outputPath]: content,
      ...acc
    };
  }, {});
};

exports.files = files;
const defaults = { ..._generate.yargsDefaults,
  crud: {
    default: false,
    description: 'Create CRUD functions',
    type: 'boolean'
  }
};
exports.defaults = defaults;

const builder = yargs => {
  var _context2;

  yargs.positional('name', {
    description: 'Name of the service',
    type: 'string'
  }).epilogue(`Also see the ${(0, _terminalLink.default)('Redwood CLI Reference', 'https://redwoodjs.com/reference/command-line-interface#generate-service')}`);
  (0, _forEach.default)(_context2 = (0, _entries.default)(defaults)).call(_context2, ([option, config]) => {
    yargs.option(option, config);
  });
};

exports.builder = builder;
const {
  command,
  description,
  handler
} = (0, _helpers.createYargsForComponentGeneration)({
  componentName: 'service',
  filesFn: files
});
exports.handler = handler;
exports.description = description;
exports.command = command;