export interface NodeTargetPaths {
    base: string;
    dataMigrations: string;
    db: string;
    dbSchema: string;
    src: string;
    functions: string;
    graphql: string;
    lib: string;
    services: string;
    config: string;
}
export interface BrowserTargetPaths {
    base: string;
    src: string;
    routes: string;
    pages: string;
    components: string;
    layouts: string;
    config: string;
    webpack: string;
    postcss: string;
}
export interface Paths {
    cache: string;
    types: string;
    base: string;
    web: BrowserTargetPaths;
    api: NodeTargetPaths;
}
export interface PagesDependency {
    importName: string;
    importPath: string;
    const: string;
    path: string;
    importStatement: string;
}
/**
 * Search the parent directories for the Redwood configuration file.
 */
export declare const getConfigPath: (cwd?: string) => string;
/**
 * The Redwood config file is used as an anchor for the base directory of a project.
 */
export declare const getBaseDir: (configPath?: string) => string;
export declare const getBaseDirFromFile: (file: string) => string;
/**
 * Use this to resolve files when the path to the file is known, but the extension
 * is not.
 */
export declare const resolveFile: (filePath: string, extensions?: string[]) => string | null;
/**
 * Path constants that are relevant to a Redwood project.
 */
export declare const getPaths: (BASE_DIR?: string) => Paths;
/**
 * Recursively process the pages directory and return information useful for
 * automated imports.
 */
export declare const processPagesDir: (webPagesDir?: string, prefix?: Array<string>) => Array<PagesDependency>;
/**
 * Converts Windows-style paths to Posix-style
 * C:\Users\Bob\dev\Redwood -> /c/Users/Bob/dev/Redwood
 *
 * The conversion only happens on Windows systems, and only for paths that are
 * not already Posix-style
 *
 * @param path Filesystem path
 */
export declare const ensurePosixPath: (path: string) => string;
//# sourceMappingURL=paths.d.ts.map