"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.server = exports.setLambdaFunctions = void 0;

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/keys"));

var _sort = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/sort"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));

var _express = _interopRequireDefault(require("express"));

var _morgan = _interopRequireDefault(require("morgan"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

let LAMBDA_FUNCTIONS = {};

const setLambdaFunctions = functions => {
  LAMBDA_FUNCTIONS = functions;
};

exports.setLambdaFunctions = setLambdaFunctions;

const server = ({
  requestHandler
}) => {
  const app = (0, _express.default)();
  app.use(_bodyParser.default.text({
    type: ['text/*', 'application/json', 'multipart/form-data']
  }));
  app.use(_bodyParser.default.raw({
    type: '*/*'
  }));
  app.use((0, _morgan.default)('dev'));
  app.all('/', (_, res) => {
    var _context, _context2;

    return res.send(`
      <p>The following serverless Functions are available:</p>
      <ol>
        ${(0, _map.default)(_context = (0, _sort.default)(_context2 = (0, _keys.default)(LAMBDA_FUNCTIONS)).call(_context2)).call(_context, name => `<li><a href="/${name}">/${name}</a></li>`).join('')}
      </ol>
    `);
  });

  const lambdaHandler = async (req, res) => {
    const {
      routeName
    } = req.params;
    const lambdaFunction = LAMBDA_FUNCTIONS[routeName];

    if (!lambdaFunction) {
      const errorMessage = `Function "${routeName}" was not found.`;
      console.error(errorMessage);
      res.status(404).send(errorMessage);
      return;
    }

    await requestHandler(req, res, lambdaFunction);
  };

  app.all('/:routeName', lambdaHandler);
  app.all('/:routeName/*', lambdaHandler);
  return app;
};

exports.server = server;