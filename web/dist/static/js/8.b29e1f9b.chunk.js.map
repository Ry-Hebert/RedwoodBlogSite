{"version":3,"sources":["layouts/PostsLayout/PostsLayout.js","components/Posts/Posts.js","components/PostsCell/PostsCell.js","pages/PostsPage/PostsPage.js"],"names":["PostsLayout","props","className","timeout","to","routes","posts","newPost","children","DELETE_POST_MUTATION","gql","truncate","text","output","length","substring","PostsList","addMessage","useFlash","useMutation","onCompleted","classes","deletePost","post","key","id","title","body","datetime","createdAt","dateTime","Date","toUTCString","editPost","href","onClick","confirm","variables","refetchQueries","QUERY","Posts","PostsPage","PostsCell"],"mappings":";;;;;sJAsBeA,IAnBK,SAACC,GACnB,OACE,yBAAKC,UAAU,eACb,kBAAC,QAAD,CAAOC,QAAS,MAChB,4BAAQD,UAAU,aAChB,wBAAIA,UAAU,iCACZ,kBAAC,OAAD,CAAME,GAAIC,SAAOC,QAASJ,UAAU,WAApC,UAIF,kBAAC,OAAD,CAAME,GAAIC,SAAOE,UAAWL,UAAU,6BACpC,yBAAKA,UAAU,kBAAf,KADF,cAIF,0BAAMA,UAAU,WAAWD,EAAMO,a;;;;;;;;;;;;;;+bCdvC,IAAMC,EAAuBC,IAAH,KAUpBC,EAAW,SAACC,GAChB,IAAIC,EAASD,EAIb,OAHIA,GAAQA,EAAKE,OAJO,MAKtBD,EAASA,EAAOE,UAAU,EALJ,KAK4B,OAE7CF,GAsFMG,EAnEG,SAAC,GAAc,IAAZV,EAAY,EAAZA,MACXW,EAAeC,qBAAfD,WADuB,EAEVE,sBAAYV,EAAsB,CACrDW,YAAa,WACXH,EAAW,gBAAiB,CAAEI,QAAS,wBAFpCC,EAFwB,YAc/B,OACE,yBAAKpB,UAAU,0CACb,2BAAOA,UAAU,YACf,+BACE,4BACE,kCACA,qCACA,oCACA,0CACA,mCAGJ,+BACG,IAAAI,GAAK,KAALA,GAAU,SAACiB,GAAD,OACT,wBAAIC,IAAKD,EAAKE,IACZ,4BAAKd,EAASY,EAAKE,KACnB,4BAAKd,EAASY,EAAKG,QACnB,4BAAKf,EAASY,EAAKI,OACnB,6BA5CGC,EA4CUL,EAAKM,UA1C5B,0BAAMC,SAAUF,EAAUF,MAAOE,GAC9B,IAAIG,KAAKH,GAAUI,iBA0CZ,4BACE,yBAAK9B,UAAU,oBACb,kBAAC,OAAD,CACEE,GAAIC,SAAOkB,KAAK,CAAEE,GAAIF,EAAKE,KAC3BC,MAAO,aAAeH,EAAKE,GAAK,UAChCvB,UAAU,6BAHZ,QAOA,kBAAC,OAAD,CACEE,GAAIC,SAAO4B,SAAS,CAAER,GAAIF,EAAKE,KAC/BC,MAAO,aAAeH,EAAKE,GAC3BvB,UAAU,4CAHZ,QAOA,uBACEgC,KAAK,IACLR,MAAO,eAAiBH,EAAKE,GAC7BvB,UAAU,0CACViC,QAAS,kBA7CJV,EA6CwBF,EAAKE,QA5C9CW,QAAQ,wCAA0CX,EAAK,MACzDH,EAAW,CAAEe,UAAW,CAAEZ,MAAMa,eAAgB,CAAC,YAF/B,IAACb,IAyCP,aA7DF,IAACG,S,6JCrBV,IAAMW,EAAQ7B,IAAH,K,sCAWK,kBAAM,4C,MAER,WACnB,OACE,yBAAKR,UAAU,kBACZ,iBACD,kBAAC,OAAD,CAAME,GAAIC,SAAOE,UAAWL,UAAU,WACnC,iB,QAMc,SAAC,GAAc,IAAZI,EAAY,EAAZA,MACxB,OAAO,kBAACkC,EAAD,CAAOlC,MAAOA,OClBRmC,UARG,WAChB,OACE,kBAACzC,EAAA,EAAD,KACE,kBAAC0C,EAAD","file":"static/js/8.b29e1f9b.chunk.js","sourcesContent":["import { Link, routes } from '@redwoodjs/router'\nimport { Flash } from '@redwoodjs/web'\n\nconst PostsLayout = (props) => {\n  return (\n    <div className=\"rw-scaffold\">\n      <Flash timeout={1000} />\n      <header className=\"rw-header\">\n        <h1 className=\"rw-heading rw-heading-primary\">\n          <Link to={routes.posts()} className=\"rw-link\">\n            Posts\n          </Link>\n        </h1>\n        <Link to={routes.newPost()} className=\"rw-button rw-button-green\">\n          <div className=\"rw-button-icon\">+</div> New Post\n        </Link>\n      </header>\n      <main className=\"rw-main\">{props.children}</main>\n    </div>\n  )\n}\n\nexport default PostsLayout\n","import { useMutation, useFlash } from '@redwoodjs/web'\nimport { Link, routes } from '@redwoodjs/router'\n\nconst DELETE_POST_MUTATION = gql`\n  mutation DeletePostMutation($id: Int!) {\n    deletePost(id: $id) {\n      id\n    }\n  }\n`\n\nconst MAX_STRING_LENGTH = 150\n\nconst truncate = (text) => {\n  let output = text\n  if (text && text.length > MAX_STRING_LENGTH) {\n    output = output.substring(0, MAX_STRING_LENGTH) + '...'\n  }\n  return output\n}\n\nconst jsonTruncate = (obj) => {\n  return truncate(JSON.stringify(obj, null, 2))\n}\n\nconst timeTag = (datetime) => {\n  return (\n    <time dateTime={datetime} title={datetime}>\n      {new Date(datetime).toUTCString()}\n    </time>\n  )\n}\n\nconst checkboxInputTag = (checked) => {\n  return <input type=\"checkbox\" checked={checked} disabled />\n}\n\nconst PostsList = ({ posts }) => {\n  const { addMessage } = useFlash()\n  const [deletePost] = useMutation(DELETE_POST_MUTATION, {\n    onCompleted: () => {\n      addMessage('Post deleted.', { classes: 'rw-flash-success' })\n    },\n  })\n\n  const onDeleteClick = (id) => {\n    if (confirm('Are you sure you want to delete post ' + id + '?')) {\n      deletePost({ variables: { id }, refetchQueries: ['POSTS'] })\n    }\n  }\n\n  return (\n    <div className=\"rw-segment rw-table-wrapper-responsive\">\n      <table className=\"rw-table\">\n        <thead>\n          <tr>\n            <th>Id</th>\n            <th>Title</th>\n            <th>Body</th>\n            <th>Created at</th>\n            <th>&nbsp;</th>\n          </tr>\n        </thead>\n        <tbody>\n          {posts.map((post) => (\n            <tr key={post.id}>\n              <td>{truncate(post.id)}</td>\n              <td>{truncate(post.title)}</td>\n              <td>{truncate(post.body)}</td>\n              <td>{timeTag(post.createdAt)}</td>\n              <td>\n                <nav className=\"rw-table-actions\">\n                  <Link\n                    to={routes.post({ id: post.id })}\n                    title={'Show post ' + post.id + ' detail'}\n                    className=\"rw-button rw-button-small\"\n                  >\n                    Show\n                  </Link>\n                  <Link\n                    to={routes.editPost({ id: post.id })}\n                    title={'Edit post ' + post.id}\n                    className=\"rw-button rw-button-small rw-button-blue\"\n                  >\n                    Edit\n                  </Link>\n                  <a\n                    href=\"#\"\n                    title={'Delete post ' + post.id}\n                    className=\"rw-button rw-button-small rw-button-red\"\n                    onClick={() => onDeleteClick(post.id)}\n                  >\n                    Delete\n                  </a>\n                </nav>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default PostsList\n","import { Link, routes } from '@redwoodjs/router'\n\nimport Posts from 'src/components/Posts'\n\nexport const QUERY = gql`\n  query POSTS {\n    posts {\n      id\n      title\n      body\n      createdAt\n    }\n  }\n`\n\nexport const Loading = () => <div>Loading...</div>\n\nexport const Empty = () => {\n  return (\n    <div className=\"rw-text-center\">\n      {'No posts yet. '}\n      <Link to={routes.newPost()} className=\"rw-link\">\n        {'Create one?'}\n      </Link>\n    </div>\n  )\n}\n\nexport const Success = ({ posts }) => {\n  return <Posts posts={posts} />\n}\n","import PostsLayout from 'src/layouts/PostsLayout'\nimport PostsCell from 'src/components/PostsCell'\n\nconst PostsPage = () => {\n  return (\n    <PostsLayout>\n      <PostsCell />\n    </PostsLayout>\n  )\n}\n\nexport default PostsPage\n"],"sourceRoot":""}